create or replace view V_LABOR_METRICS(
	ORG_ID,
	FACILITY_ID,
	PROD_JOIN,
	LOGIN_USER_ID,
	USER_TYPE,
	USER_FIRST_NAME,
	USER_LAST_NAME,
	EMPLOYEE_NAME,
	START_DATE,
	LABOR_HOUR,
	JOB_FUNCTION_NAME,
	WORK_CENTER,
	LEVEL_1,
	LEVEL_2,
	LEVEL_3,
	LEVEL_4,
	LEVEL_5,
	DEPT,
	LM_DEPT,
	SHIFT_CODE,
	UNITS_PRODUCED,
	UOM,
	THRUPUT,
	EARNED_HOURS,
	TOTAL_TIME,
	PAID_BREAK,
	UNPAID_BREAK,
	ON_STANDARD_DIRECT_LABOR,
	ON_STANDARD_INDIRECT_LABOR,
	ADJUSTED_ON_STANDARD_DIRECT_LABOR,
	ADJUSTED_ON_STANDARD_INDIRECT_LABOR,
	NON_STANDARD_DIRECT_LABOR,
	SCHEDULED_INDIRECT_LABOR,
	USER_DEFINED_INDIRECT_LABOR,
	UNPAID_OVERLAP_NON_STANDARD_DIRECT_LABOR,
	PAID_OVERLAP_NON_STANDARD_DIRECT_LABOR,
	UNPAID_OVERLAP_USER_DEFINED_INDIRECT_LABOR,
	PAID_OVERLAP_USER_DEFINED_INDIRECT_LABOR,
	BREAKS,
	ACTUAL_HOURS,
	PERC_PERF,
	PERC_PERF_NO_GAP,
	STD_HOURS,
	NONSTD_HOURS,
	BREAK_HOURS,
	LUNCH_HOURS,
	STARTUPCLEANUP_HOURS,
	DIRECT_HOURS,
	INDIRECT_HOURS,
	STANDARD_HOURS,
	NON_STANDARD_HOURS,
	TOTAL_UPH,
	GOAL_UPH,
	GAP_HOURS,
	UTILIZATION,
	SUPERVISOR_USERID,
	SUPERVISOR_FIRST_NAME,
	SUPERVISOR_LAST_NAME,
	SUPERVISOR_NAME
) as
WITH ExtendedPerformanceData AS (
    SELECT 
        'FL1' AS ORG_ID,
        '83' AS FACILITY_ID,
        'FL1' || '_' || '83' || '_' || ED.LOGIN_USER_ID || '_' || ED.LABOR_DATE || '_' || ED.LABOR_HOUR AS PROD_JOIN,
        ED.LOGIN_USER_ID,
        CASE 
            WHEN U.USER_TYPE_ID = '4' THEN 'TEMPORARY' 
            ELSE 'PERMANENT' 
        END AS USER_TYPE,
        U.USER_FIRST_NAME,
        U.USER_LAST_NAME,
        U.USER_LAST_NAME || ', ' || U.USER_FIRST_NAME AS EMPLOYEE_NAME,
        ED.LABOR_DATE,
        ED.LABOR_HOUR,
        ED.JOB_FUNCTION_NAME,
        ED.LEVEL_2 AS WORK_CENTER,
        ED.LEVEL_1, 
        ED.LEVEL_2, 
        ED.LEVEL_3, 
        ED.LEVEL_4, 
        ED.LEVEL_5,
        ED.DEPT_CODE,
        ED.LEVEL_2 AS LM_DEPT,
        ED.SHIFT_CODE,
        SUM(ED.UNITS_PRODUCED) AS UNITS_PRODUCED,
        ED.DISPLAY_UOM,
        SUM(ED.DISPLAY_UOM_QTY) AS THRUPUT,
        SUM(ED.TOTAL_PAM) / 60 AS EARNED_HOURS, 
        SUM(ED.TOTAL_TIME) / 60 AS TOTAL_TIME,
        SUM(ED.PAID_BRK) / 60 AS PAID_BREAK,
        SUM(ED.UNPAID_BRK) / 60 AS UNPAID_BREAK,       
        SUM(ED.OSDL) / 60 AS ON_STANDARD_DIRECT_LABOR, 
        SUM(ED.OSIL) / 60 AS ON_STANDARD_INDIRECT_LABOR, 
        SUM(ED.ADJ_OSDL) / 60 AS ADJUSTED_ON_STANDARD_DIRECT_LABOR, 
        SUM(ED.ADJ_OSIL) / 60 AS ADJUSTED_ON_STANDARD_INDIRECT_LABOR, 
        SUM(ED.NSDL) / 60 AS NON_STANDARD_DIRECT_LABOR, 
        SUM(ED.SIL) / 60 AS SCHEDULED_INDIRECT_LABOR,       
        SUM(ED.UDIL) / 60 AS USER_DEFINED_INDIRECT_LABOR,
        SUM(ED.UNPAID_OVERLAP_NSDL) / 60 AS UNPAID_OVERLAP_NON_STANDARD_DIRECT_LABOR,
        SUM(ED.PAID_OVERLAP_NSDL) / 60 AS PAID_OVERLAP_NON_STANDARD_DIRECT_LABOR,
        SUM(ED.UNPAID_OVERLAP_UDIL) / 60 AS UNPAID_OVERLAP_USER_DEFINED_INDIRECT_LABOR,
        SUM(ED.PAID_OVERLAP_UDIL) / 60 AS PAID_OVERLAP_USER_DEFINED_INDIRECT_LABOR,       
        SUM(ED.PAID_BRK + ED.UNPAID_BRK) / 60 AS BREAKS,
        SUM(ED.TOTAL_TIME - ED.PAID_BRK - ED.UNPAID_BRK - ED.ADJ_OSDL - ED.ADJ_OSIL - ED.NSDL - ED.SIL - ED.UDIL + ED.UNPAID_OVERLAP_NSDL + ED.PAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_UDIL + ED.PAID_OVERLAP_UDIL) / 60 AS ACTUAL_HOURS,
        CASE 
            WHEN SUM(ED.TOTAL_TIME - ED.PAID_BRK - ED.UNPAID_BRK - ED.ADJ_OSDL - ED.ADJ_OSIL - ED.NSDL - ED.SIL - ED.UDIL + ED.UNPAID_OVERLAP_NSDL + ED.PAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_UDIL + ED.PAID_OVERLAP_UDIL) = 0 THEN 0 
            ELSE SUM(ED.TOTAL_PAM) / SUM(ED.TOTAL_TIME - ED.PAID_BRK - ED.UNPAID_BRK - ED.ADJ_OSDL - ED.ADJ_OSIL - ED.NSDL - ED.SIL - ED.UDIL + ED.UNPAID_OVERLAP_NSDL + ED.PAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_UDIL + ED.PAID_OVERLAP_UDIL) 
        END AS PERC_PERF,
        CASE 
            WHEN SUM(ED.TOTAL_TIME - ED.PAID_BRK - ED.UNPAID_BRK - ED.ADJ_OSDL - ED.ADJ_OSIL - ED.NSDL - ED.SIL - ED.UDIL + ED.UNPAID_OVERLAP_NSDL + ED.PAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_UDIL + ED.PAID_OVERLAP_UDIL) = 0 THEN 0 
            ELSE SUM(ED.TOTAL_PAM) / SUM(ED.TOTAL_TIME - ED.PAID_BRK - ED.UNPAID_BRK - ED.ADJ_OSDL - ED.ADJ_OSIL - ED.NSDL - ED.SIL - ED.UDIL + ED.UNPAID_OVERLAP_NSDL + ED.PAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_UDIL + ED.PAID_OVERLAP_UDIL) 
        END AS PERC_PERF_NO_GAP,       
        SUM((ED.OSDL + ED.UIL - ED.ADJ_OSDL - ED.UNPAID_OVERLAP_OSDL - ED.PAID_OVERLAP_OSDL) + (ED.OSIL - ED.ADJ_OSIL - ED.UNPAID_OVERLAP_OSIL - ED.PAID_OVERLAP_OSIL)) / 60 AS STD_HOURS, 
        SUM((ED.NSDL - ED.ADJ_NSDL - ED.UNPAID_OVERLAP_NSDL - ED.PAID_OVERLAP_NSDL) + (ED.UDIL - ED.ADJ_UDIL - ED.UNPAID_OVERLAP_UDIL - ED.PAID_OVERLAP_UDIL)) / 60 AS NONSTD_HOURS,
        SUM(ED.PAID_BRK) / 60 AS BREAK_HOURS, 
        SUM(ED.UNPAID_BRK) / 60 AS LUNCH_HOURS, 
        SUM(ED.SIL) / 60 AS STARTUPCLEANUP_HOURS,
        SUM(ED.ADJ_NSDL + ED.OSDL + ED.PAID_OVERLAP_NSDL + ED.PAID_OVERLAP_OSDL + ED.NSDL + ED.ADJ_OSDL + ED.UNPAID_OVERLAP_NSDL + ED.UNPAID_OVERLAP_OSDL) / 60 AS DIRECT_HOURS,
        SUM(ED.PAID_OVERLAP_UDIL + ED.UNPAID_OVERLAP_UDIL + ED.ADJ_OSIL + ED.UNPAID_OVERLAP_OSIL + ED.PAID_OVERLAP_OSIL + ED.UIL + ED.SIL + ED.ADJ_UDIL + ED.UDIL + ED.OSIL) / 60 AS INDIRECT_HOURS,       
        SUM((ED.OSDL + ED.UIL - ED.ADJ_OSDL - ED.UNPAID_OVERLAP_OSDL - ED.PAID_OVERLAP_OSDL) + (ED.OSIL - ED.ADJ_OSIL - ED.UNPAID_OVERLAP_OSIL - ED.PAID_OVERLAP_OSIL)) / 60 AS STANDARD_HOURS, 
        SUM((ED.NSDL - ED.ADJ_NSDL - ED.UNPAID_OVERLAP_NSDL - ED.PAID_OVERLAP_NSDL) + (ED.UDIL - ED.ADJ_UDIL - ED.UNPAID_OVERLAP_UDIL - ED.PAID_OVERLAP_UDIL)) / 60 AS NON_STANDARD_HOURS,
        SUM(ED.UNITS_PRODUCED) / (CASE WHEN SUM(ED.ACTUAL_HOURS) > 0 THEN SUM(ED.ACTUAL_HOURS) ELSE 1 END) AS TOTAL_UPH,
        SUM(ED.UNITS_PRODUCED) / (CASE WHEN SUM(ED.PERC_PERF) > 0 THEN SUM(ED.PERC_PERF) ELSE 1 END) AS GOAL_UPH,       
        SUM(ED.UIL) / 60 AS GAP_HOURS, 
        CASE 
            WHEN SUM(ED.TOTAL_TIME - ED.BREAKS - ED.SCHEDULED_INDIRECT_LABOR) = 0 THEN 0 
            ELSE (SUM(NON_STANDARD_DIRECT_LABOR) + SUM(ON_STANDARD_DIRECT_LABOR) + SUM(USER_DEFINED_INDIRECT_LABOR)) / (SUM(ED.TOTAL_TIME) - SUM(ED.BREAKS) - SUM(ED.SCHEDULED_INDIRECT_LABOR))
        END AS UTILIZATION,
        ED.SPVSR_LOGIN_USER_ID AS SUPERVISOR_USERID,
        U2.USER_FIRST_NAME AS SUPERVISOR_FIRST_NAME,
        U2.USER_LAST_NAME AS SUPERVISOR_LAST_NAME,
        U2.USER_LAST_NAME || ', ' || U2.USER_FIRST_NAME AS SUPERVISOR_NAME
    FROM (WITH PerformanceSummary AS (
    SELECT
        CASE 
            WHEN LEFT(E.LOGIN_USER_ID, 1) = 'U' THEN SUBSTRING(E.LOGIN_USER_ID, 2, 20) 
            ELSE E.LOGIN_USER_ID 
        END AS LOGIN_USER_ID,
        E.JOB_FUNCTION_NAME, 
        E.SPVSR_LOGIN_USER_ID, 
        E.DEPT_CODE, 
        E.CLOCK_IN_DATE, 
        E.CLOCK_OUT_DATE, 
        E.CLOCK_IN_STATUS, 
        NVL(SUM(T.QTY), 0) AS UNITS_PRODUCED,
        E.TOTAL_SAM, 
        E.TOTAL_PAM, 
        E.TOTAL_TIME, 
        E.OSDL, 
        E.OSIL, 
        E.NSDL, 
        E.SIL, 
        E.UDIL, 
        E.UIL, 
        E.PAID_BRK, 
        E.UNPAID_BRK, 
        E.ADJ_OSDL, 
        E.ADJ_OSIL, 
        E.ADJ_UDIL, 
        E.ADJ_NSDL, 
        E.PAID_OVERLAP_OSDL, 
        E.UNPAID_OVERLAP_OSDL, 
        E.PAID_OVERLAP_NSDL, 
        E.UNPAID_OVERLAP_NSDL, 
        E.PAID_OVERLAP_OSIL, 
        E.UNPAID_OVERLAP_OSIL, 
        E.PAID_OVERLAP_UDIL, 
        E.UNPAID_OVERLAP_UDIL,
        CAST(E.CREATE_DATE_TIME AS DATE) AS LABOR_DATE,
        EXTRACT(HOUR FROM E.CREATE_DATE_TIME) AS LABOR_HOUR,
        E.CREATE_DATE_TIME,
        E.SHIFT_CODE, 
        E.START_DATE_TIME, 
        E.END_DATE_TIME,
        E.TOTAL_QTY, 
        E.DISPLAY_UOM_QTY, 
        E.DISPLAY_UOM, 
        E.PERF_SMRY_TRAN_ID
    FROM 
        E_CONSOL_PERF_SMRY E
    LEFT JOIN 
        E_THRUPUT_SMRY_DTL T ON E.PERF_SMRY_TRAN_ID = T.PERF_SMRY_TRAN_ID 
        AND T.UOM_CODE = E.DISPLAY_UOM 
        AND CAST(T.CREATE_DATE_TIME AS DATE) = CAST(E.CLOCK_IN_DATE AS DATE) 
        AND EXTRACT(HOUR FROM T.CREATE_DATE_TIME) = EXTRACT(HOUR FROM E.CREATE_DATE_TIME)
    LEFT JOIN 
        E_JOB_FUNCTION J ON E.JOB_FUNCTION_NAME = J.NAME
    WHERE 
        E.CLOCK_IN_STATUS < 99
        AND E.__HEVO__MARKED_DELETED = 'FALSE'
        AND CAST(E.CREATE_DATE_TIME AS DATE) >= DATEADD(day, -6, CURRENT_DATE)
    GROUP BY 
        E.LOGIN_USER_ID, 
        E.JOB_FUNCTION_NAME, 
        E.SPVSR_LOGIN_USER_ID, 
        E.DEPT_CODE, 
        E.CLOCK_IN_DATE, 
        E.CLOCK_OUT_DATE, 
        E.CLOCK_IN_STATUS, 
        E.TOTAL_SAM, 
        E.TOTAL_PAM, 
        E.TOTAL_TIME, 
        E.OSDL, 
        E.OSIL, 
        E.NSDL, 
        E.SIL, 
        E.UDIL, 
        E.UIL, 
        E.PAID_BRK, 
        E.UNPAID_BRK, 
        E.ADJ_OSDL, 
        E.ADJ_OSIL, 
        E.ADJ_UDIL, 
        E.ADJ_NSDL, 
        E.PAID_OVERLAP_OSDL, 
        E.UNPAID_OVERLAP_OSDL, 
        E.PAID_OVERLAP_NSDL, 
        E.UNPAID_OVERLAP_NSDL, 
        E.PAID_OVERLAP_OSIL, 
        E.UNPAID_OVERLAP_OSIL, 
        E.PAID_OVERLAP_UDIL, 
        E.UNPAID_OVERLAP_UDIL, 
        CAST(E.CREATE_DATE_TIME AS DATE),
        EXTRACT(HOUR FROM E.CREATE_DATE_TIME),
        E.CREATE_DATE_TIME,
        E.SHIFT_CODE, 
        E.START_DATE_TIME, 
        E.END_DATE_TIME,
        E.TOTAL_QTY, 
        E.DISPLAY_UOM_QTY, 
        E.DISPLAY_UOM, 
        E.PERF_SMRY_TRAN_ID
)
) AS ED
    JOIN UCL_USER AS U ON U.USER_NAME = ED.LOGIN_USER_ID
    JOIN UCL_USER AS U2 ON U2.USER_NAME = ED.SPVSR_LOGIN_USER_ID
GROUP BY
    ED.LABOR_DATE,
    ED.LABOR_HOUR,
    ED.JOB_FUNCTION_NAME,
    ED.LOGIN_USER_ID,
    U.USER_TYPE_ID,
    U.USER_FIRST_NAME,
    U.USER_LAST_NAME,
    U2.USER_FIRST_NAME,
    U2.USER_LAST_NAME,
    ED.DEPT_CODE,
    ED.SHIFT_CODE,
    ED.TOTAL_TIME,
    ED.LEVEL_1,
    ED.LEVEL_2,
    ED.LEVEL_3,
    ED.LEVEL_4,
    ED.LEVEL_5,
    ED.SPVSR_LOGIN_USER_ID,
    ED.DISPLAY_UOM;
